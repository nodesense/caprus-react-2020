[{"/home/krish/product-app/src/index.js":"1","/home/krish/product-app/src/app/App.jsx":"2","/home/krish/product-app/src/app/components/Header.jsx":"3","/home/krish/product-app/src/app/components/Footer.jsx":"4","/home/krish/product-app/src/app/components/Counter.jsx":"5","/home/krish/product-app/src/app/components/CartSummary.jsx":"6","/home/krish/product-app/src/app/components/CartList.jsx":"7","/home/krish/product-app/src/app/components/Cart.jsx":"8","/home/krish/product-app/src/app/components/CartItem.jsx":"9","/home/krish/product-app/src/app/components/Checkout.jsx":"10","/home/krish/product-app/src/app/contexts/ThemeContext.js":"11","/home/krish/product-app/src/app/components/FuncCounter.jsx":"12","/home/krish/product-app/src/app/components/FuncCart.js":"13","/home/krish/product-app/src/app/store.js":"14","/home/krish/product-app/src/app/state/middlewares/cacheMiddleware.js":"15","/home/krish/product-app/src/app/components/ReduxCounter.js":"16","/home/krish/product-app/src/app/containers/ReduxCounter.js":"17","/home/krish/product-app/src/app/state/actions/counter.actions.js":"18","/home/krish/product-app/src/app/state/middlewares/index.js":"19","/home/krish/product-app/src/app/state/reducers/counterReducer.js":"20","/home/krish/product-app/src/app/state/action-types.js":"21","/home/krish/product-app/src/app/state/reducers/authReducer.js":"22","/home/krish/product-app/src/app/containers/Header.js":"23","/home/krish/product-app/src/app/state/actions/auth.actions.js":"24","/home/krish/product-app/src/app/components/AdminBlock.jsx":"25","/home/krish/product-app/src/app/containers/AdminBlock.js":"26","/home/krish/product-app/src/app/components/PrivateRoute.jsx":"27","/home/krish/product-app/src/app/components/TextInput.jsx":"28"},{"size":607,"mtime":1609419190736,"results":"29","hashOfConfig":"30"},{"size":5479,"mtime":1609854317250,"results":"31","hashOfConfig":"30"},{"size":1757,"mtime":1609853692266,"results":"32","hashOfConfig":"30"},{"size":1831,"mtime":1609248924558,"results":"33","hashOfConfig":"30"},{"size":7149,"mtime":1608809868273,"results":"34","hashOfConfig":"30"},{"size":2835,"mtime":1608815164022,"results":"35","hashOfConfig":"30"},{"size":1959,"mtime":1608815359575,"results":"36","hashOfConfig":"30"},{"size":5194,"mtime":1609853842924,"results":"37","hashOfConfig":"30"},{"size":2360,"mtime":1609156851735,"results":"38","hashOfConfig":"30"},{"size":2659,"mtime":1609855580879,"results":"39","hashOfConfig":"30"},{"size":176,"mtime":1609248863360,"results":"40","hashOfConfig":"30"},{"size":2434,"mtime":1609248734399,"results":"41","hashOfConfig":"30"},{"size":6233,"mtime":1609248902969,"results":"42","hashOfConfig":"30"},{"size":1351,"mtime":1609851204909,"results":"43","hashOfConfig":"30"},{"size":605,"mtime":1609851750508,"results":"44","hashOfConfig":"30"},{"size":1449,"mtime":1609421886232,"results":"45","hashOfConfig":"30"},{"size":3167,"mtime":1609421979503,"results":"46","hashOfConfig":"30"},{"size":395,"mtime":1609417256804,"results":"47","hashOfConfig":"30"},{"size":240,"mtime":1609417882082,"results":"48","hashOfConfig":"30"},{"size":594,"mtime":1609417314741,"results":"49","hashOfConfig":"30"},{"size":277,"mtime":1609847260005,"results":"50","hashOfConfig":"30"},{"size":622,"mtime":1609847514286,"results":"51","hashOfConfig":"30"},{"size":683,"mtime":1609854530695,"results":"52","hashOfConfig":"30"},{"size":1393,"mtime":1609851437950,"results":"53","hashOfConfig":"30"},{"size":340,"mtime":1609853763067,"results":"54","hashOfConfig":"30"},{"size":343,"mtime":1609853715607,"results":"55","hashOfConfig":"30"},{"size":634,"mtime":1609854695824,"results":"56","hashOfConfig":"30"},{"size":1242,"mtime":1609855620166,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"yq61ix",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},"/home/krish/product-app/src/index.js",[],["123","124"],"/home/krish/product-app/src/app/App.jsx",[],"/home/krish/product-app/src/app/components/Header.jsx",["125"],"/home/krish/product-app/src/app/components/Footer.jsx",[],"/home/krish/product-app/src/app/components/Counter.jsx",[],"/home/krish/product-app/src/app/components/CartSummary.jsx",["126"],"// CartSummary.js\nimport React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\n\n//TODO: PropTypes\n\n// TODO: PureComponent\n class CartSummary extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            discount: 0,\n            grandTotal: 0\n        }\n    }\n \n    //TODO: componentWillMount\n    //TODO: componentWillReceiveProps, recalculate \n \n    //TODO: shouldComponentUpdate\n\n    recalculate(props) {\n        let discount = 0;\n\n        if (props.count >= 10) {\n            discount = 20;\n        } else if (props.count >= 5) {\n            discount = 10;\n        }\n\n        let grandTotal = props.amount - (props.amount * discount / 100);\n\n        this.setState({\n            discount, \n            grandTotal\n        })\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        let discount = 0;\n\n        if (props.count >= 10) {\n            discount = 20;\n        } else if (props.count >= 5) {\n            discount = 10;\n        }\n\n        let grandTotal = props.amount - (props.amount * discount / 100);\n\n        return {\n            discount, \n            grandTotal\n        }\n\n    }\n     \n\n    // is called only on update cycle\n        // when parent render called\n        // when this.setState called\n        // NOT called when we do this.forceUpdate\n    \n    // this function decide wheter render can be called or not\n    // by comparing values of props and state\n    // return true means, the data changed, then render to be called\n    // return false means, no data change, no need to call render\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('Summary shouldComponentUpdate nextProps', nextProps)\n        console.log('Summary shouldComponentUpdate nextState', nextState)\n        console.log('Summary shouldComponentUpdate currentState', this.state)\n        console.log('Summary shouldComponentUpdate currentPRops', this.props)\n        \n        // this works\n        // not scable when we have more properties, state items\n        return nextProps.amount !== this.props.amount ||\n               nextProps.count !== this.props.count ||\n               nextState.discount !== this.state.discount ||\n               nextState.grandTotal !== this.state.grandTotal;\n\n        //return true; // call render\n        //return false; // doesn't call render\n    }\n\n    \n    render() {\n        console.log(\"CartSummary Render\");\n        return (\n            <div> \n            <h2>Cart Summary</h2>\n            <p> Amount : {this.props.amount} </p>\n            <p> Count : {this.props.count} </p>\n\n            <p> Discount: {this.state.discount} %</p>\n            <p> Grand Total: {this.state.grandTotal} </p>\n            </div>\n        )\n    }\n} \n\n\nCartSummary.defaultProps = {\n    \n}\n\nCartSummary.propTypes = {\n    \n}\n\nexport default CartSummary;",["127","128"],"/home/krish/product-app/src/app/components/CartList.jsx",["129","130"],"// CartList.js\n\nimport React, {PureComponent} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport CartItem from \"./CartItem\";\n\n //TODO: PureComponent\n\n // PureComponent comes with shouldComponentUpdate already implemented\n // it compares next props with this props,\n // it compares next state with this props\n // return true if any change in props or state\n // return false if no change in props or state\n\n class CartList extends PureComponent {\n    constructor(props) {\n        super(props);\n    }\n     \n    //TODO: shouldComponentUpdate\n    \n    render() {\n        console.log(\"CartList Render\");\n\n        let {items, removeItem, updateItem} = this.props;\n\n        return (\n            <div> \n            <h2>Cart List</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Price</th>\n                        <th>Qty</th>\n                        <th>Total</th>\n                        <th>Delete</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {/* TODO props items map with CartItem */ }\n\n                    {/*\n                        how to write a loop expression\n                        JSX doesn't accept statement, only accept expressions\n                        and importance of key property/reserved react keyword\n                    */  }\n\n                    {\n                        items.map (item => <CartItem item={item} \n                                                     key={item.id}   \n                                                     removeItem={removeItem}\n                                                     updateItem={updateItem}\n                        \n                        /> )\n                    }\n\n                </tbody>\n            </table>\n            </div>\n        )\n    }\n} \n\nCartList.defaultProps = {\n    \n}\n\nCartList.propTypes = {\n    \n}\n\nexport default CartList;",["131","132"],"/home/krish/product-app/src/app/components/Cart.jsx",["133"],"/home/krish/product-app/src/app/components/CartItem.jsx",["134","135"],"// CartItem.js\nimport React, {PureComponent} from \"react\";\nimport PropTypes from \"prop-types\";\nimport ThemeContext from \"../contexts/ThemeContext\";\n\nclass CartItem extends PureComponent {\n\n    // to consume context in class component\n    // consume at max only one context this way\n    // for more contexts? user Consumer\n    static contextType = ThemeContext\n\n    // CREATION/MOUNTUNG STAGE : Lifecycle, called only once per instance\n    constructor(props) {\n        super(props);\n    }\n\n   \n    // CALLED ONCE during CREATION/MOUNTING\n    // CALLED on UPDATE CYCLE setState, forceUpdate, parent render\n    render() {\n        let {item, updateItem, removeItem} = this.props;\n\n        console.log(\"CartItem Render \", item.id);\n\n        return (\n            <tr>\n                <td>{item.name} </td>\n                <td>{item.price}</td>\n                <td>{item.qty}</td>\n                <td>{item.price * item.qty}</td>\n                <td> \n                    {/* calling CartItem updateItem, removeItem */}\n                <button onClick={() => updateItem(item.id, item.qty + 1) }>\n                        +1\n                </button>    \n\n                <button onClick={ () => updateItem(item.id, item.qty - 1) }>\n                        -1\n                </button>    \n\n                <button onClick={ () => removeItem(item.id) }>\n                        X - {this.context.scheme}\n                </button>\n                </td>\n            </tr>\n        )\n    }\n\n\n\n    // Called during CREATION stage only once after render\n    // V.doms are mounted into real dom, refs are ready, access to dom possible here\n    // start/set the timer\n    // make api call\n    // susbcribe\n    componentDidMount() {\n        console.log(\"CART ITEM, componentDidMount\")\n    }\n\n    // called during update stage after the render function\n    // v.dom are mounted into real dom during update cycle\n    // useful for DOM access, access to ref\n    componentDidUpdate() {\n        console.log(\"CART ITEM, componentDidUpdate\")\n    }\n\n    // called during unmount\n    // removing compoentn from memory\n    // useful for clearing resources, stop susbcribption, clear timer\n    // only once\n    componentWillUnmount() {\n        console.log('CARTITEM componentWillUnmount')\n    }\n} \n\n\nCartItem.defaultProps = {\n    \n}\n\nCartItem.propTypes = {\n    \n}\n\nexport default CartItem;","/home/krish/product-app/src/app/components/Checkout.jsx",[],"/home/krish/product-app/src/app/contexts/ThemeContext.js",[],"/home/krish/product-app/src/app/components/FuncCounter.jsx",[],"/home/krish/product-app/src/app/components/FuncCart.js",["136"],"import React, {useReducer, useState, useMemo, useContext} from 'react';\nimport ThemeContext from '../contexts/ThemeContext';\n\nconst INITIAL_STATE = {\n    items: [],\n    count: 0,\n    amount: 0\n}\n\nfunction calculate(items) {\n    let a = 0, c = 0;\n    for (let item of items) {\n        a += item.qty * item.price\n        c += item.qty\n    }\n\n    return {\n        items,\n        count: c,\n        amount: a\n    }\n}\n\n// pure component\nconst cartReducer = (state, action) => {\n    switch(action.type) {\n        case 'addItem': {\n                // action = { type: 'addItem', item : {id:, name, price, qty}}\n        \n            const items = [...state.items, action.item]\n            \n            // retrn new state\n            return calculate(items)\n        }\n        case 'removeItem': {\n                // action, {type: removeItem, id: 12}\n                const items = state.items.filter (item => item.id != action.id)\n\n                // retrn new state\n                return calculate(items)\n        }\n        case 'updateItem': {\n                // action, {type: updateItem, id: 12, qty: 2}\n                const items = state.items.map (item => item.id === action.id?\n                                                       {...item, qty: action.qty}\n                                                       : item)\n\n               return calculate(items)\n        }\n        case 'reset': {\n            // action, {type: reset},\n            return INITIAL_STATE;\n        }\n\n        default: return state;\n    }\n}\n\nfunction calcGrandTotal(amount, count) {\n    console.log('calc calcGrandTotal Expensive call ', amount, count)\n    let discount = 0;\n\n    if (count >= 10) {\n        discount = 20;\n    } else if (count >= 5) {\n        discount = 10;\n    }\n\n    let grandTotal = amount - (amount * discount / 100);\n\n    return {\n        discount, \n        grandTotal\n    }\n}\n\nconst FuncCart = () => {\n\n    const theme = useContext(ThemeContext);\n\n    // cartState  { items: [], amount, count }\n    // dispatch is a function that will invoke the reducer with action\n    // reducer (state, action)\n    // dispatch(action) ==> call reducer(state from react/closure, action from dispatch)\n    const [cartState, dispatch] = useReducer(cartReducer, INITIAL_STATE)\n\n    const { items, amount, count } = cartState;\n\n    // expensive calls, calls calcGrandTotal again and again for same args\n    //const {discount, \n    //    grandTotal} = calcGrandTotal(amount, count)\n\n\n    const {discount, \n        grandTotal} = useMemo( () => calcGrandTotal(amount, count), \n                                        [amount, count])\n\n \n    const [flag, setFlag] = useState(true)\n\n    return (\n        <div>\n            <h2>Cart</h2>\n\n            <button onClick={ () => setFlag(!flag)}>Flag</button>\n\n            <button onClick={ () => {\n                         const id = Math.ceil(Math.random() * 10000);\n                         const item = {\n                             id,\n                             name: `Product ${id}`,\n                             price: Math.ceil(Math.random() * 100),\n                             qty: 1\n                         }\n\n                         const action = {\n                             type: 'addItem',\n                             item\n                         } \n\n                        // calls reducer\n                        // re-render v.dom\n                         dispatch(action)\n                } }>\n                Add Item\n            </button>\n\n\n            <button onClick={ () => {\n                dispatch({type: 'reset'})\n            } }>\n                Empty\n            </button>\n\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Price</th>\n                        <th>Qty</th>\n                        <th>Total</th>\n                        <th>Delete</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        items.map ( item => (\n                            <tr key={item.id}>\n                                    <td>{item.name} </td>\n                                    <td>{item.price}</td>\n                                    <td>{item.qty}</td>\n                                    <td>{item.price * item.qty}</td>\n                                    <td> \n                                        {/* calling CartItem updateItem, removeItem */}\n                                    <button onClick={() => {\n                                        const action = {type: 'updateItem',\n                                                        qty: item.qty + 1,\n                                                        id: item.id\n                                                    }\n\n                                        dispatch(action)\n                                    }  }>\n                                            +1\n                                    </button>    \n\n                                    <button onClick={ () => {\n                                         const action = {type: 'updateItem',\n                                         qty: item.qty - 1,\n                                         id: item.id\n                                        }\n\n                                         dispatch(action)\n                                    } }>\n                                            -1\n                                    </button>    \n\n                                    <button onClick={ () => {\n                                        const action = {type: 'removeItem',\n                                        id: item.id}\n\n                                        dispatch(action)\n                                    }}>\n                                    X - {theme.scheme}\n                                    </button>\n                                    </td>\n                                </tr>\n                        ))\n                    }\n\n\n                </tbody>\n        </table>\n\n        <p> Amount {amount}</p>\n        <p>Count {count} </p>\n\n        <p> Discount {discount}</p>\n        <p>Grand total  {grandTotal} </p>\n\n        </div>\n    )\n}\n\nexport default FuncCart;",["137","138"],"/home/krish/product-app/src/app/store.js",[],"/home/krish/product-app/src/app/state/middlewares/cacheMiddleware.js",["139"],"/home/krish/product-app/src/app/components/ReduxCounter.js",["140"],"/home/krish/product-app/src/app/containers/ReduxCounter.js",[],"/home/krish/product-app/src/app/state/actions/counter.actions.js",[],"/home/krish/product-app/src/app/state/middlewares/index.js",[],"/home/krish/product-app/src/app/state/reducers/counterReducer.js",[],"/home/krish/product-app/src/app/state/action-types.js",[],"/home/krish/product-app/src/app/state/reducers/authReducer.js",[],"/home/krish/product-app/src/app/containers/Header.js",[],"/home/krish/product-app/src/app/state/actions/auth.actions.js",[],"/home/krish/product-app/src/app/components/AdminBlock.jsx",[],"/home/krish/product-app/src/app/containers/AdminBlock.js",[],"/home/krish/product-app/src/app/components/PrivateRoute.jsx",[],"/home/krish/product-app/src/app/components/TextInput.jsx",["141"],"import React from 'react';\n\nclass TextInput extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            value: props.value\n        }\n    }\n\n    // static getDerivedStateFromProps(props, state ) {\n    //     return {\n    //         value: props.value\n    //     }\n    // }\n\n    handleChange = (e) => {\n        const {name, value} = e.target; // target is real dom input,select, checkbox \n        //console.log(name, value)\n        // take value from control, update the state,\n        // this cause re-render, then v.dom updated with value from state\n        this.setState({value})\n    }\n\n    onBlur = () => {\n        const event = {\n            target: {name: this.props.name, value: this.state.value}\n        }\n        this.props.onChange && this.props.onChange(event)\n    }\n\n    render() {\n        //onChange shall be ignored here\n        const {onChange, ...props} = this.props;\n        console.log('TextInput render ', this.props);\n\n        return (\n            <input {...props}\n                    value = {this.state.value}\n                    onChange={this.handleChange} \n                    onBlur={this.onBlur}\n            />\n        )\n    }\n}\n\nexport default TextInput;",{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":4,"column":9,"nodeType":"148","messageId":"149","endLine":4,"endColumn":13},{"ruleId":"146","severity":1,"message":"150","line":3,"column":8,"nodeType":"148","messageId":"149","endLine":3,"endColumn":17},{"ruleId":"142","replacedBy":"151"},{"ruleId":"144","replacedBy":"152"},{"ruleId":"146","severity":1,"message":"150","line":4,"column":8,"nodeType":"148","messageId":"149","endLine":4,"endColumn":17},{"ruleId":"153","severity":1,"message":"154","line":17,"column":5,"nodeType":"155","messageId":"156","endLine":19,"endColumn":6},{"ruleId":"142","replacedBy":"157"},{"ruleId":"144","replacedBy":"158"},{"ruleId":"146","severity":1,"message":"150","line":4,"column":8,"nodeType":"148","messageId":"149","endLine":4,"endColumn":17},{"ruleId":"146","severity":1,"message":"150","line":3,"column":8,"nodeType":"148","messageId":"149","endLine":3,"endColumn":17},{"ruleId":"153","severity":1,"message":"154","line":14,"column":5,"nodeType":"155","messageId":"156","endLine":16,"endColumn":6},{"ruleId":"159","severity":1,"message":"160","line":37,"column":67,"nodeType":"161","messageId":"162","endLine":37,"endColumn":69},{"ruleId":"142","replacedBy":"163"},{"ruleId":"144","replacedBy":"164"},{"ruleId":"159","severity":1,"message":"165","line":16,"column":49,"nodeType":"161","messageId":"162","endLine":16,"endColumn":51},{"ruleId":"146","severity":1,"message":"166","line":2,"column":10,"nodeType":"148","messageId":"149","endLine":2,"endColumn":19},{"ruleId":"146","severity":1,"message":"167","line":19,"column":16,"nodeType":"148","messageId":"149","endLine":19,"endColumn":20},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.",["168"],["169"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["168"],["169"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["168"],["169"],"Expected '===' and instead saw '=='.","'INCREMENT' is defined but never used.","'name' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]