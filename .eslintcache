[{"/home/krish/product-app/src/index.js":"1","/home/krish/product-app/src/app/App.jsx":"2","/home/krish/product-app/src/app/components/Header.jsx":"3","/home/krish/product-app/src/app/components/Footer.jsx":"4","/home/krish/product-app/src/app/components/Counter.jsx":"5","/home/krish/product-app/src/app/components/CartSummary.jsx":"6","/home/krish/product-app/src/app/components/CartList.jsx":"7","/home/krish/product-app/src/app/components/Cart.jsx":"8","/home/krish/product-app/src/app/components/CartItem.jsx":"9","/home/krish/product-app/src/app/components/Checkout.jsx":"10","/home/krish/product-app/src/app/contexts/ThemeContext.js":"11","/home/krish/product-app/src/app/components/FuncCounter.jsx":"12","/home/krish/product-app/src/app/components/FuncCart.js":"13"},{"size":337,"mtime":1608727694233,"results":"14","hashOfConfig":"15"},{"size":4906,"mtime":1609244359430,"results":"16","hashOfConfig":"15"},{"size":1084,"mtime":1609162485287,"results":"17","hashOfConfig":"15"},{"size":1831,"mtime":1609248924558,"results":"18","hashOfConfig":"15"},{"size":7149,"mtime":1608809868273,"results":"19","hashOfConfig":"15"},{"size":2835,"mtime":1608815164022,"results":"20","hashOfConfig":"15"},{"size":1959,"mtime":1608815359575,"results":"21","hashOfConfig":"15"},{"size":5038,"mtime":1609161890116,"results":"22","hashOfConfig":"15"},{"size":2360,"mtime":1609156851735,"results":"23","hashOfConfig":"15"},{"size":2234,"mtime":1609161848812,"results":"24","hashOfConfig":"15"},{"size":176,"mtime":1609248863360,"results":"25","hashOfConfig":"15"},{"size":2434,"mtime":1609248734399,"results":"26","hashOfConfig":"15"},{"size":6233,"mtime":1609248902969,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"yq61ix",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/krish/product-app/src/index.js",[],["61","62"],"/home/krish/product-app/src/app/App.jsx",[],"/home/krish/product-app/src/app/components/Header.jsx",[],"/home/krish/product-app/src/app/components/Footer.jsx",[],"/home/krish/product-app/src/app/components/Counter.jsx",[],"/home/krish/product-app/src/app/components/CartSummary.jsx",["63"],"// CartSummary.js\nimport React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\n\n//TODO: PropTypes\n\n// TODO: PureComponent\n class CartSummary extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            discount: 0,\n            grandTotal: 0\n        }\n    }\n \n    //TODO: componentWillMount\n    //TODO: componentWillReceiveProps, recalculate \n \n    //TODO: shouldComponentUpdate\n\n    recalculate(props) {\n        let discount = 0;\n\n        if (props.count >= 10) {\n            discount = 20;\n        } else if (props.count >= 5) {\n            discount = 10;\n        }\n\n        let grandTotal = props.amount - (props.amount * discount / 100);\n\n        this.setState({\n            discount, \n            grandTotal\n        })\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        let discount = 0;\n\n        if (props.count >= 10) {\n            discount = 20;\n        } else if (props.count >= 5) {\n            discount = 10;\n        }\n\n        let grandTotal = props.amount - (props.amount * discount / 100);\n\n        return {\n            discount, \n            grandTotal\n        }\n\n    }\n     \n\n    // is called only on update cycle\n        // when parent render called\n        // when this.setState called\n        // NOT called when we do this.forceUpdate\n    \n    // this function decide wheter render can be called or not\n    // by comparing values of props and state\n    // return true means, the data changed, then render to be called\n    // return false means, no data change, no need to call render\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('Summary shouldComponentUpdate nextProps', nextProps)\n        console.log('Summary shouldComponentUpdate nextState', nextState)\n        console.log('Summary shouldComponentUpdate currentState', this.state)\n        console.log('Summary shouldComponentUpdate currentPRops', this.props)\n        \n        // this works\n        // not scable when we have more properties, state items\n        return nextProps.amount !== this.props.amount ||\n               nextProps.count !== this.props.count ||\n               nextState.discount !== this.state.discount ||\n               nextState.grandTotal !== this.state.grandTotal;\n\n        //return true; // call render\n        //return false; // doesn't call render\n    }\n\n    \n    render() {\n        console.log(\"CartSummary Render\");\n        return (\n            <div> \n            <h2>Cart Summary</h2>\n            <p> Amount : {this.props.amount} </p>\n            <p> Count : {this.props.count} </p>\n\n            <p> Discount: {this.state.discount} %</p>\n            <p> Grand Total: {this.state.grandTotal} </p>\n            </div>\n        )\n    }\n} \n\n\nCartSummary.defaultProps = {\n    \n}\n\nCartSummary.propTypes = {\n    \n}\n\nexport default CartSummary;",["64","65"],"/home/krish/product-app/src/app/components/CartList.jsx",["66","67"],"// CartList.js\n\nimport React, {PureComponent} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport CartItem from \"./CartItem\";\n\n //TODO: PureComponent\n\n // PureComponent comes with shouldComponentUpdate already implemented\n // it compares next props with this props,\n // it compares next state with this props\n // return true if any change in props or state\n // return false if no change in props or state\n\n class CartList extends PureComponent {\n    constructor(props) {\n        super(props);\n    }\n     \n    //TODO: shouldComponentUpdate\n    \n    render() {\n        console.log(\"CartList Render\");\n\n        let {items, removeItem, updateItem} = this.props;\n\n        return (\n            <div> \n            <h2>Cart List</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Price</th>\n                        <th>Qty</th>\n                        <th>Total</th>\n                        <th>Delete</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {/* TODO props items map with CartItem */ }\n\n                    {/*\n                        how to write a loop expression\n                        JSX doesn't accept statement, only accept expressions\n                        and importance of key property/reserved react keyword\n                    */  }\n\n                    {\n                        items.map (item => <CartItem item={item} \n                                                     key={item.id}   \n                                                     removeItem={removeItem}\n                                                     updateItem={updateItem}\n                        \n                        /> )\n                    }\n\n                </tbody>\n            </table>\n            </div>\n        )\n    }\n} \n\nCartList.defaultProps = {\n    \n}\n\nCartList.propTypes = {\n    \n}\n\nexport default CartList;",["68","69"],"/home/krish/product-app/src/app/components/Cart.jsx",["70"],"// Cart.js\n\nimport React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport CartList from \"./CartList\";\nimport CartSummary from \"./CartSummary\";\n\nclass Cart extends Component {\n    static defaultProps = {\n    \n    }\n\n    static propTypes = {\n    \n    }\n    \n    constructor(props) {\n        super(props);\n\n        const items = []\n\n        for (let i = 0; i < 1000; i++) {\n            let id = Math.ceil(Math.random() * 10000) + \"-\" + Math.ceil(Math.random() * 566);\n            let item = {\n                id,\n                name: `Product ${id}`,\n                price: Math.ceil(Math.random() * 100),\n                qty: 1\n            }\n\n            items.push(item)\n        }\n\n        this.state = {\n            items,\n            // items: [ \n            // \t\t\t{id: 1, name: 'P1', price: 100, qty: 5}\n            //        ],\n                   \n            amount: 0, // sum of all items price * qty\n            count: 0, // sum of all items qty\n            flag: true\n        }\n    }\n    \n    addItem = () => {\n        let id = Math.ceil(Math.random() * 10000);\n        let item = {\n            id,\n            name: `Product ${id}`,\n            price: Math.ceil(Math.random() * 100),\n            qty: 1\n        }\n\n        //TODO:\n \n        // this.setState({items: [...this.state.items, item]})\n\n        // functional setState example\n        this.setState( (state, props) => {\n           return  {items: [...state.items, item]}\n        })\n\n        // derived state present then, using functional setState is good\n    }\n    \n    // child to parent communication, via function callback\n    // to be invoked by child component when + or - button clicked\n    // parent should pass removeItem function to CartList as props\n    // CartList should pass to CartItem\n    // Then CartItem componetn shall call removeItem  function directly\n    removeItem = (id) => {\n        //TODO: assignment tonight\n        // do not mutate the state, items \n        // immutable item, state\n        console.log('removeItem called', id)\n        this.setState( {\n            // returns all items except the one we need to remove\n            items: this.state.items.filter (item => item.id !== id)\n        })\n    }\n\n    updateItem = (id, qty) => {\n        //TODO: assignment tonight\n        console.log('update item called ', id, qty)\n\n        this.setState( {\n            items: this.state.items.map ( item => item.id === id? {...item, qty}: item )\n        })\n    }\n\n    empty = () => {\n        //TODO\n        this.setState({items: []})    \n    }\n\n\n\n    //dummy\n    refresh = () => {\n        // cause the render to be called, \n        // cause child render also\n        // something which is irrelevant to cart items\n        this.setState({\n            flag: true\n        })\n    }\n\n    // derived data from state\n    recalculate(items) {\n        let count = 0, \n            amount = 0;\n\n        for (let item of items) {\n            amount += item.price * item.qty;\n            count += item.qty;\n        }\n\n        this.setState({\n            amount,\n            count\n        })\n    }\n\n    //TODO:\n    // called before calling render function on update and creation stage\n    // implement business login based on props and state\n    // called whenever parent render, parent rener will cause child render too\n    // retrn a new state if any changes\n    // When we need to do a busines or calculate derived data based on state/props change\n    // this method replaces two old life cycle methods \n            /// componentWillMount(), componentWillReciveProps - deprecated\n    static getDerivedStateFromProps(props, state) {\n        let count = 0, \n            amount = 0;\n\n        for (let item of state.items) {\n            amount += item.price * item.qty;\n            count += item.qty;\n        }\n        \n        // return new state\n\n        return {amount, count}\n    }\n\n\n    gotoCheckout = () => {\n        // write code to move from cart to checkout\n        // js\n    }\n    \n    \n    render() {\n        console.log(\"Cart render\", this.props)\n        return (\n            <div> \n            <h2>Cart</h2>\n\n            <button onClick={this.addItem}>\n                Add Item\n            </button>\n\n\n            <button onClick={this.empty}>\n                Empty\n            </button>\n\n            <button onClick={this.refresh}>\n                Refresh\n            </button>\n\n            <button onClick={ () => this.props.history.push(\"/checkout\")}>\n                        Checkout\n            </button>\n            \n            {\n            /* when function is used as props, avoid \n                arrow functions, instead use es.next/bind\n            */\n            }\n            <CartList  items={this.state.items}  \n                       removeItem={this.removeItem}\n                       updateItem={this.updateItem}\n            />\n\n            <CartSummary amount={this.state.amount}\n                         count = {this.state.count}\n            />\n\n            </div>\n        )\n    }\n} \n\n\n\n\nexport default Cart;","/home/krish/product-app/src/app/components/CartItem.jsx",["71","72"],"// CartItem.js\nimport React, {PureComponent} from \"react\";\nimport PropTypes from \"prop-types\";\nimport ThemeContext from \"../contexts/ThemeContext\";\n\nclass CartItem extends PureComponent {\n\n    // to consume context in class component\n    // consume at max only one context this way\n    // for more contexts? user Consumer\n    static contextType = ThemeContext\n\n    // CREATION/MOUNTUNG STAGE : Lifecycle, called only once per instance\n    constructor(props) {\n        super(props);\n    }\n\n   \n    // CALLED ONCE during CREATION/MOUNTING\n    // CALLED on UPDATE CYCLE setState, forceUpdate, parent render\n    render() {\n        let {item, updateItem, removeItem} = this.props;\n\n        console.log(\"CartItem Render \", item.id);\n\n        return (\n            <tr>\n                <td>{item.name} </td>\n                <td>{item.price}</td>\n                <td>{item.qty}</td>\n                <td>{item.price * item.qty}</td>\n                <td> \n                    {/* calling CartItem updateItem, removeItem */}\n                <button onClick={() => updateItem(item.id, item.qty + 1) }>\n                        +1\n                </button>    \n\n                <button onClick={ () => updateItem(item.id, item.qty - 1) }>\n                        -1\n                </button>    \n\n                <button onClick={ () => removeItem(item.id) }>\n                        X - {this.context.scheme}\n                </button>\n                </td>\n            </tr>\n        )\n    }\n\n\n\n    // Called during CREATION stage only once after render\n    // V.doms are mounted into real dom, refs are ready, access to dom possible here\n    // start/set the timer\n    // make api call\n    // susbcribe\n    componentDidMount() {\n        console.log(\"CART ITEM, componentDidMount\")\n    }\n\n    // called during update stage after the render function\n    // v.dom are mounted into real dom during update cycle\n    // useful for DOM access, access to ref\n    componentDidUpdate() {\n        console.log(\"CART ITEM, componentDidUpdate\")\n    }\n\n    // called during unmount\n    // removing compoentn from memory\n    // useful for clearing resources, stop susbcribption, clear timer\n    // only once\n    componentWillUnmount() {\n        console.log('CARTITEM componentWillUnmount')\n    }\n} \n\n\nCartItem.defaultProps = {\n    \n}\n\nCartItem.propTypes = {\n    \n}\n\nexport default CartItem;","/home/krish/product-app/src/app/components/Checkout.jsx",[],"/home/krish/product-app/src/app/contexts/ThemeContext.js",[],"/home/krish/product-app/src/app/components/FuncCounter.jsx",[],"/home/krish/product-app/src/app/components/FuncCart.js",["73"],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":17},{"ruleId":"74","replacedBy":"82"},{"ruleId":"76","replacedBy":"83"},{"ruleId":"78","severity":1,"message":"79","line":4,"column":8,"nodeType":"80","messageId":"81","endLine":4,"endColumn":17},{"ruleId":"84","severity":1,"message":"85","line":17,"column":5,"nodeType":"86","messageId":"87","endLine":19,"endColumn":6},{"ruleId":"74","replacedBy":"88"},{"ruleId":"76","replacedBy":"89"},{"ruleId":"78","severity":1,"message":"79","line":4,"column":8,"nodeType":"80","messageId":"81","endLine":4,"endColumn":17},{"ruleId":"78","severity":1,"message":"79","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":17},{"ruleId":"84","severity":1,"message":"85","line":14,"column":5,"nodeType":"86","messageId":"87","endLine":16,"endColumn":6},{"ruleId":"90","severity":1,"message":"91","line":37,"column":67,"nodeType":"92","messageId":"93","endLine":37,"endColumn":69},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar",["94"],["95"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["94"],["95"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]